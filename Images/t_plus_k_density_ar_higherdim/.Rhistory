filter(!is.na(Return))
# Get a density estimate, weighted towards more recent observations, and smoothed more than the default
n = nrow(stock_data)
weights = delta^((n-1):0)
weights = weights / sum(weights)
dens = density(stock_data$Return, na.rm=TRUE, weights = weights, adjust=2)
# Sample from the density estimate and calculate the total returns over a month
sample_month_vol <- function(dens, forecast_length){
s = sample(stock_data$Return, size=forecast_length, prob=weights, replace=TRUE) + rnorm(forecast_length, 0, dens$bw)
sd(s)
# prod(s + 1) # To calculate the simulated monthly return
}
sim_monthly_vol = map_dbl(1:n_sim, function(i) sample_month_vol(dens, forecast_length))
# Put the monthly returns on an annualized percent basis - better to transform the volatility than the returns
# sim_annualized_return = 100*(sim_monthly_return^12 - 1)
return(list("sim_monthly_vol" = sim_monthly_vol, "bw" = dens$bw))
}
# Test the forecast method for a specified test month 'm', using prior data as the training data
test_month <- function(method, m, stock, datasub, days_in_month, samples_per_day, delta, n_sim){
split = (max(datasub$idx) - m*days_in_month*samples_per_day)
train_data = datasub %>% filter(idx <= split & Stock == stock)
test_data = datasub %>% filter(idx > split &  idx <= (split + days_in_month*samples_per_day) & Stock == stock)
sim_monthly_vol = method(train_data, forecast_length = days_in_month*samples_per_day, delta=delta, n_sim=n_sim)[["sim_monthly_vol"]]
true_monthly_vol = sd(test_data$Return)
# Put both in terms of annual percent volatility
sim_ann_vol = sim_monthly_vol * sqrt(252*samples_per_day) * 100
true_ann_vol = true_monthly_vol * sqrt(252*samples_per_day) * 100
# Point estimate for volatility
est_ann_vol = mean(sim_ann_vol)
# return the estimate, true value, and its quantile in the simulated range
return(c("estimate" = est_ann_vol,
"true" = true_ann_vol,
"quantile" = sum(sim_ann_vol < true_ann_vol) / n_sim,
"lb" = quantile(sim_ann_vol, .025),
"ub" = quantile(sim_ann_vol, .975)))
}
# Test a sequence of months N, given the number of samples per day and the discount factor delta
test_method_vol <- function(data, method, samples_per_day = 1, test_months = 3, delta=.99){
days_in_month = 21
n_sim = 1000
datasub = subsample_data(data, samples_per_day)
stocks = unique(datasub$Stock)
stock_arg = rep(stocks, test_months)
month_arg = rep(1:test_months, each=6)
results = data.frame(t(map2_dfc(stock_arg, month_arg, function(s, m) test_month(method, m, s, datasub, days_in_month, samples_per_day, delta, n_sim))))
results = cbind(stock_arg, 13 - month_arg, results)
names(results) = c("Stock", "Test_Month", "Estimate", "True", "Quantile", "lb", "ub")
results$Test_Month = as.factor(results$Test_Month)
return(results)
}
# Forecast 1 month into the future
forecast_month <- function(method, stock, datasub, days_in_month, samples_per_day, delta, n_sim){
# Forecast 1 month ahead
output = method(datasub %>% filter(Stock == stock), forecast_length = days_in_month*samples_per_day, delta=delta, n_sim=n_sim)
sim_monthly_vol = output[["sim_monthly_vol"]]
bw = output[["bw"]]
# Put in terms of annual percent volatility
sim_ann_vol = sim_monthly_vol * sqrt(252*samples_per_day) * 100
# Point estimate for volatility
est_ann_vol = mean(sim_ann_vol)
# return the estimate, and 95% credible interval
return(c("estimate" = est_ann_vol,
"lb" = quantile(sim_ann_vol, .025),
"ub" = quantile(sim_ann_vol, .975),
"bw" = bw))
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(GGally)
setwd("~/Documents/CV/Job Search/SIG Onsite/")
source("exercise_fxns.R")
data = read_csv("stockdata3.csv")
# Set 0's and 1's to NA (need to include 1's, there's a few in stock d that needed to be cleaned up)
zero_one_tona <- function(x){
x[x == 0] = NA
x[x == 1] = NA
return(x)
}
# Replace NaNs with the value directly before it aka backfill
data[,3:8] = apply(data[,3:8], 2, function(x) zero_one_tona(x))
data = data %>% fill(3:8)
# Find the change point in stock C, divide by half before that point, assume its a stock split
# This looks quite reasonable to me, the jump there is no greater than any other jumps I'm seeing in the series
split_pt = sum(data$c > 75)
data$c[1:split_pt] = data$c[1:split_pt]/2
datasub = subsample_data(data, samples_per_day = 40)
p = ggplot(datasub, aes(x = idx, y = Price)) + geom_line() +
facet_wrap(~Stock, scales="free_y") +
xlab('Time') +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
p
p = ggplot(datasub, aes(x = idx, y = Return)) +
geom_point(alpha=.1, size=.5) +
facet_wrap(~Stock, scales="free_y") +
xlab('Time') +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
p
# Run the sample_empirical_returns method
samples_per_day = 2
delta = .99
results = test_method_vol(data, sample_empirical_returns, samples_per_day = samples_per_day, test_months = 6, delta=delta)
# Plot of true vs estimated values
l = max(results$Estimate, results$True)
p1 = ggplot(results, aes(x = Estimate, y=True, color=Test_Month, shape=Stock)) +
geom_point(size=2) +
xlim(0, l+10) +
ylim(0, l+10) +
xlab('Estimated Volatility') + ylab('True Volatility') +
geom_abline(slope=1, intercept=0)
p1
quantile_coverage <- function(results, q){
alpha = (1-q)/2
coverage = mean(results %>% mutate(in_cred_int = Quantile > alpha & Quantile < (1-alpha)) %>% pull(in_cred_int))
}
theoretical_coverage = c(.1, .2, .3, .4, .5, .6, .7, .8, .9)
coverage = map_dbl(theoretical_coverage, function(q) quantile_coverage(results, q))
plot_data = data.frame("Theoretical_Coverage" = theoretical_coverage, "Actual_Coverage" = coverage)
p2 = ggplot(plot_data, aes(x = Theoretical_Coverage, y=Actual_Coverage)) +
geom_point() + geom_line() +
xlim(0, 1) + ylim(0, 1) +
xlab('Theoretical Coverage') + ylab('Actual Coverage') +
geom_abline(slope=1, intercept=0)
p2
datasub = subsample_data(data, samples_per_day = samples_per_day)
stocks = unique(datasub$Stock)
days_in_month = 21
n_sim = 1000
results = data.frame(t(map_dfc(stocks, function(s) forecast_month(sample_empirical_returns,
s,
datasub,
days_in_month,
samples_per_day,
delta,
n_sim))))
names(results) = c("Forecast Volatility", "Lower Bound", "Upper Bound", "KDE Bandwidth")
rownames(results) = paste("Stock", stocks)
# Format the results
results[,4] = round(results[,4], 3)
results[,1:3] = round(results[,1:3], 1)
knitr::kable(results, align='r')
?ggplot
library(tidyverse)
library(mvtnorm)
n = 500000
a = 1
R = 1
alpha = 1 #latent factor mean
sigma = 1 #latent factor variance (it's a t-distribution, so need to multiply by ct)
sim_ftheta_norm <- function(a, R, alpha, sigma, n){
theta = rnorm(n, a, sqrt(R))
phi = rnorm(n, alpha, sqrt(sigma))
ftheta = theta*phi
f = alpha*a
q = alpha*R*alpha + a*sigma*a + sum(diag(R*sigma))
ftheta_variational = rnorm(n, f, sqrt(q))
return(list("ftheta" = ftheta, "ftheta_var" = ftheta_variational))
}
out = sim_ftheta_norm(a, R, alpha, sigma, n)
attach(out)
samps = tibble("Ftheta_exact" = ftheta, "Ftheta_variational" = ftheta_var)
samps = samps %>% gather("method", "sample", 1:2)
p = ggplot(samps, aes(x = sample, color=method, fill=method)) + geom_density(alpha=.2) + theme_bw()
p
library(zoo)
library(ggplot2)
library(tidyr)
library(directlabels)
library(arrayhelpers)
library(gridExtra)
library(dplyr)
library(tidyverse)
basepath = "~/Homework/SAMSI Bays Opt/Paper Modeling/Scripts/Adaptive-Variable-Selection/"
setwd(basepath)
source("./Scripts/plots_comparison_functions.R")
training_period = 60 #30 for simulation example
filename = "t_plus_k_density_ar"
imgfolder = paste0(basepath, "Images/", filename)
if(!dir.exists(imgfolder)){
dir.create(imgfolder)
}
# Load the BMA data
simulation = paste("bma", filename, sep="_")
load(paste0(basepath, "Simulations/", simulation, ".RData"))
diff = FALSE
plot_bma = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period) %>% mutate("model" = "bma")
kdens_bma = get_kdens_data(k_step_density_store, time, "bma", training_period)
bma_envs = environments
# Make the standard individual plots
setwd(imgfolder)
if(!dir.exists(simulation)){
dir.create(simulation)
}
setwd(paste("./", simulation, sep=''))
plot_data = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period)
if(!intervention){
interventions = NULL
}
# Load the AVS data
setwd(basepath)
# setwd(paste("../Images/", filename, sep=""))
simulation = paste("AVS", filename, sep="_")
load(paste("./Simulations/", simulation, ".RData", sep=''))
diff = FALSE
plot_avs = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period) %>% mutate("model" = "avs")
kdens_avs = get_kdens_data(k_step_density_store, time, "avs", training_period)
avs_envs = environments
# Make the standard individual plots
setwd(imgfolder)
if(!dir.exists(simulation)){
dir.create(simulation)
}
setwd(paste("./", simulation, sep=''))
plot_data = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period)
if(!intervention){
interventions = NULL
}
# Make the comparison plots
setwd(imgfolder)
imgfolder
# Plot the marginal rMSE
plot_data = bind_rows(plot_bma, plot_avs)
p = rMSE_marg_combined(plot_data, names, scales="free_y") + scale_x_continuous(name = "Forecast Length", breaks = seq(1, k, by=4))
p
# Plot the objective fxn relative to AVS over time
kdens_data = get_kdens_comparison_data(list(kdens_avs, kdens_bma))
# Plot the objective fxn over time
p = LPDR_logitudinal(kdens_data) +
scale_x_continuous("Time", breaks = tticks[seq(3, 14, by=2)], labels = tdates[seq(3, 14, by=2)]) +
scale_y_continuous(name = "log density of k-step forecast")#, limits=c(-100, 0))
p
# Plot the cumulative objective fxn over time
kdens_data_cumsum = kdens_data %>% spread(key = "model", value = "k_step_path_density") %>%
mutate(bma = bma - avs) %>%
transmute(time = time,
bma = cumsum(bma)) %>%
gather("model", "LPDR", 2)
p = LPDR(kdens_data_cumsum) +
scale_x_continuous("Time", breaks = tticks, labels = tdates) +
scale_y_continuous(name = "log density of k-step forecast \n relative to AVS")
p
make_jpg(p, paste(filename, "k_step_path_density_comparison_cumulative", sep="_"))
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
library(tidyverse)
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
walk2(plot_list, names, function(p, n) make_jpg(p, paste(filename, "AVS_BMA_forecast_k24", n, sep="_")))
# Forecast plots
# Multiple lengths at the same time - avs
plot_list = lapply(1:num_series, function(i) forecast_multiple_lengths(plot_data, series_number = i, names, mod = "avs", forecast_lengths = c(1, 24)))
walk2(plot_list, names, function(p, n) make_jpg(p, paste(filename, "AVS_forecast_k1_k24", n, sep="_")))
forecast_multiple_mods <- function(plot_data, series_number, series_names, mods, forecast_length){
ylims = range(plot_data %>% filter(series == series_number) %>% pull(true_value))
mean = mean(plot_data %>% filter(series == series_number) %>% pull(true_value))
ylims[1] = ylims[1] - (mean - ylims[1])
ylims[2] = ylims[2] - (mean - ylims[2])
# forecast_mod_names = paste(str_to_upper(mod), "Forecast", forecast_length, "Months Ahead", sep=" ")
forecast_mod_names = map(mods, function(mod) paste(str_to_upper(mod), "Forecast", sep=" "))
plot_data = plot_data %>%
filter(series == series_number & k == forecast_length & model %in% mods) %>%
mutate(forecast_mod_name = factor(model, levels = mods, labels = forecast_mod_names))
p_preds = ggplot(plot_data, aes(x = time, y = prediction))
predictive_plot = p_preds +
geom_ribbon(aes(ymax = upper, ymin=lower), fill = "grey90") +
geom_ribbon(aes(ymax = cred_75, ymin=cred_25), fill="grey70") +
geom_line(aes(y = prediction, color = "a", linetype='a'), size=1) +
geom_line(aes(y = true_value, color = "b", linetype='b'), size=1) +
geom_vline(xintercept = (interventions - 1 + forecast_lengths), color="black") +
coord_cartesian(ylim = ylims) +
facet_wrap(~forecast_mod_name, ncol=1, strip.position = "left")
return(standard_theme(predictive_plot, ylab = NULL))
}
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
forecast_multiple_mods <- function(plot_data, series_number, series_names, mods, forecast_length){
ylims = range(plot_data %>% filter(series == series_number) %>% pull(true_value))
mean = mean(plot_data %>% filter(series == series_number) %>% pull(true_value))
ylims[1] = ylims[1] - (mean - ylims[1])
ylims[2] = ylims[2] - (mean - ylims[2])
# forecast_mod_names = paste(str_to_upper(mod), "Forecast", forecast_length, "Months Ahead", sep=" ")
forecast_mod_names = map(mods, function(mod) paste(str_to_upper(mod), "Forecast", sep=" "))
plot_data = plot_data %>%
filter(series == series_number & k == forecast_length & model %in% mods) %>%
mutate(forecast_mod_name = factor(model, levels = mods, labels = forecast_mod_names))
p_preds = ggplot(plot_data, aes(x = time, y = prediction))
predictive_plot = p_preds +
geom_ribbon(aes(ymax = upper, ymin=lower), fill = "grey90") +
geom_ribbon(aes(ymax = cred_75, ymin=cred_25), fill="grey70") +
geom_line(aes(y = prediction, color = "a", linetype='a'), size=1) +
geom_line(aes(y = true_value, color = "b", linetype='b'), size=1) +
geom_vline(xintercept = (interventions - 1 + forecast_length), color="black") +
coord_cartesian(ylim = ylims) +
facet_wrap(~forecast_mod_name, ncol=1, strip.position = "left")
return(standard_theme(predictive_plot, ylab = NULL))
}
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
walk2(plot_list, names, function(p, n) make_jpg(p, paste(filename, "AVS_BMA_forecast_k24", n, sep="_")))
library(zoo)
library(ggplot2)
library(tidyr)
library(directlabels)
library(arrayhelpers)
library(gridExtra)
library(dplyr)
library(tidyverse)
basepath = "~/Homework/SAMSI Bays Opt/Paper Modeling/Scripts/Adaptive-Variable-Selection/"
setwd(basepath)
source("./Scripts/plots_comparison_functions.R")
training_period = 60 #30 for simulation example
filename = "lpfds"
imgfolder = paste0(basepath, "Images/", filename)
if(!dir.exists(imgfolder)){
dir.create(imgfolder)
}
# Load the BMA data
simulation = paste("bma", filename, sep="_")
load(paste0(basepath, "Simulations/", simulation, ".RData"))
diff = FALSE
plot_bma = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period) %>% mutate("model" = "bma")
kdens_bma = get_kdens_data(k_step_density_store, time, "bma", training_period)
bma_envs = environments
# Make the standard individual plots
setwd(imgfolder)
if(!dir.exists(simulation)){
dir.create(simulation)
}
setwd(paste("./", simulation, sep=''))
plot_data = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period)
if(!intervention){
interventions = NULL
}
# Load the AVS data
setwd(basepath)
# setwd(paste("../Images/", filename, sep=""))
simulation = paste("AVS", filename, sep="_")
load(paste("./Simulations/", simulation, ".RData", sep=''))
diff = FALSE
plot_avs = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period) %>% mutate("model" = "avs")
kdens_avs = get_kdens_data(k_step_density_store, time, "avs", training_period)
avs_envs = environments
# Make the standard individual plots
setwd(imgfolder)
if(!dir.exists(simulation)){
dir.create(simulation)
}
setwd(paste("./", simulation, sep=''))
plot_data = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period)
if(!intervention){
interventions = NULL
}
# Make the pdfs
for(i in 1:num_series){
series_number = i
make_standard_plots(plot_data, environments[[series_number]]$model_store, environments[[series_number]]$predictor_inclusion_probabilities_store, series_number, interventions, k_step_density_store, k = forecast_length, training_period, paste(names[series_number], ".pdf", sep=""))
}
# Make the comparison plots
setwd(imgfolder)
# Plot the marginal rMSE
plot_data = bind_rows(plot_bma, plot_avs)
p = rMSE_marg_combined(plot_data, names, scales="free_y") + scale_x_continuous(name = "Forecast Length", breaks = seq(1, k, by=4))
p
# Plot the objective fxn relative to AVS over time
kdens_data = get_kdens_comparison_data(list(kdens_avs, kdens_bma))
# Plot the objective fxn over time
p = LPDR_logitudinal(kdens_data) +
scale_x_continuous("Time", breaks = tticks[seq(3, 14, by=2)], labels = tdates[seq(3, 14, by=2)]) +
scale_y_continuous(name = "log density of k-step forecast")#, limits=c(-100, 0))
p
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
plot_list[[1]]
plot_list[[2]]
plot_list[[3]]
k
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 12))
plot_list[[1]]
plot_list[[2]]
plot_list[[3]]
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
plot_list[[1]]
plot_list[[2]]
plot_list[[3]]
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24) + ylim(-5, 10))
plot_list[[3]]
forecast_multiple_mods <- function(plot_data, series_number, series_names, mods, forecast_length){
ylims = range(plot_data %>% filter(series == series_number) %>% pull(true_value))
mean = mean(plot_data %>% filter(series == series_number) %>% pull(true_value))
ylims[1] = ylims[1] - (mean - ylims[1])*1.2
ylims[2] = ylims[2] - (mean - ylims[2])*1.2
# forecast_mod_names = paste(str_to_upper(mod), "Forecast", forecast_length, "Months Ahead", sep=" ")
forecast_mod_names = map(mods, function(mod) paste(str_to_upper(mod), "Forecast", sep=" "))
plot_data = plot_data %>%
filter(series == series_number & k == forecast_length & model %in% mods) %>%
mutate(forecast_mod_name = factor(model, levels = mods, labels = forecast_mod_names))
p_preds = ggplot(plot_data, aes(x = time, y = prediction))
predictive_plot = p_preds +
geom_ribbon(aes(ymax = upper, ymin=lower), fill = "grey90") +
geom_ribbon(aes(ymax = cred_75, ymin=cred_25), fill="grey70") +
geom_line(aes(y = prediction, color = "a", linetype='a'), size=1) +
geom_line(aes(y = true_value, color = "b", linetype='b'), size=1) +
geom_vline(xintercept = (interventions - 1 + forecast_length), color="black") +
coord_cartesian(ylim = ylims) +
facet_wrap(~forecast_mod_name, ncol=1, strip.position = "left")
return(standard_theme(predictive_plot, ylab = NULL))
}
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
plot_list[[3]]
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
walk2(plot_list, names, function(p, n) make_jpg(p, paste(filename, "AVS_BMA_forecast_k24", n, sep="_")))
library(zoo)
library(ggplot2)
library(tidyr)
library(directlabels)
library(arrayhelpers)
library(gridExtra)
library(dplyr)
library(tidyverse)
basepath = "~/Homework/SAMSI Bays Opt/Paper Modeling/Scripts/Adaptive-Variable-Selection/"
setwd(basepath)
source("./Scripts/plots_comparison_functions.R")
training_period = 60 #30 for simulation example
filename = "t_plus_k_ar_higherdim"
imgfolder = paste0(basepath, "Images/", filename)
if(!dir.exists(imgfolder)){
dir.create(imgfolder)
}
# Load the BMA data
simulation = paste("bma", filename, sep="_")
load(paste0(basepath, "Simulations/", simulation, ".RData"))
filename = "t_plus_k_density_ar_higherdim"
imgfolder = paste0(basepath, "Images/", filename)
if(!dir.exists(imgfolder)){
dir.create(imgfolder)
}
# Load the BMA data
simulation = paste("bma", filename, sep="_")
load(paste0(basepath, "Simulations/", simulation, ".RData"))
diff = FALSE
plot_bma = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period) %>% mutate("model" = "bma")
kdens_bma = get_kdens_data(k_step_density_store, time, "bma", training_period)
bma_envs = environments
# Make the standard individual plots
setwd(imgfolder)
if(!dir.exists(simulation)){
dir.create(simulation)
}
setwd(paste("./", simulation, sep=''))
plot_data = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period)
if(!intervention){
interventions = NULL
}
# Load the AVS data
setwd(basepath)
# setwd(paste("../Images/", filename, sep=""))
simulation = paste("AVS", filename, sep="_")
load(paste("./Simulations/", simulation, ".RData", sep=''))
diff = FALSE
plot_avs = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period) %>% mutate("model" = "avs")
kdens_avs = get_kdens_data(k_step_density_store, time, "avs", training_period)
avs_envs = environments
# Make the standard individual plots
setwd(imgfolder)
if(!dir.exists(simulation)){
dir.create(simulation)
}
setwd(paste("./", simulation, sep=''))
plot_data = get_plot_data(cred_int_store, forecast_sample_store, diff, training_period)
if(!intervention){
interventions = NULL
}
# Make the comparison plots
setwd(imgfolder)
imgfolder
# Plot the marginal rMSE
plot_data = bind_rows(plot_bma, plot_avs)
p = rMSE_marg_combined(plot_data, names, scales="free_y") + scale_x_continuous(name = "Forecast Length", breaks = seq(1, k, by=4))
p
# Plot the objective fxn relative to AVS over time
kdens_data = get_kdens_comparison_data(list(kdens_avs, kdens_bma))
# Plot the objective fxn over time
p = LPDR_logitudinal(kdens_data) +
scale_x_continuous("Time", breaks = tticks[seq(3, 14, by=2)], labels = tdates[seq(3, 14, by=2)]) +
scale_y_continuous(name = "log density of k-step forecast")#, limits=c(-100, 0))
p
# Plot the cumulative objective fxn over time
kdens_data_cumsum = kdens_data %>% spread(key = "model", value = "k_step_path_density") %>%
mutate(bma = bma - avs) %>%
transmute(time = time,
bma = cumsum(bma)) %>%
gather("model", "LPDR", 2)
p = LPDR(kdens_data_cumsum) +
scale_x_continuous("Time", breaks = tticks, labels = tdates) +
scale_y_continuous(name = "log density of k-step forecast \n relative to AVS")
p
# Comparing AVS and BMA forecasts
plot_list = lapply(1:num_series, function(i) forecast_multiple_mods(plot_data, i, names, mods = c("avs", "bma"), forecast_length = 24))
walk2(plot_list, names, function(p, n) make_jpg(p, paste(filename, "AVS_BMA_forecast_k24", n, sep="_")))
# Model plots - avs
plot_list = lapply(avs_envs, function(e) model_plot(e$model_store, e$xnames, e$Omega, training_period))
walk2(plot_list, names, function(p, n) make_jpg(p, paste(filename, "AVS_model", n, sep="_"), width=12*.7, height=8*.7, res=150))
# Model plots - bma
plot_list = lapply(bma_envs, function(e) model_plot(e$model_store, e$xnames, e$Omega, training_period))
walk2(plot_list, names, function(p, n) make_jpg(p, paste(filename, "BMA_model", n, sep="_"), width=12*.7, height=8*.7, res=150))
70/5
15*5
